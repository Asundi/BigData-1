<p>val orders= sc.textFile("retail_db/orders")
//2013-07-25 00:00:00.0 -&gt; 20130725 asInt

scala&gt; val str = orders.first
str: String = 1,2013-07-25 00:00:00.0,11599,CLOSED

scala&gt; str.split(",")(1).substring(0,10)
res1: String = 2013-07-25

scala&gt; str.split(",")(1).substring(0,10).replace("-","")
res3: String = 20130725

scala&gt; str.split(",")(1).substring(0,10).replace("-","").toInt
res4: Int = 20130725

val t = orders.map(x =&gt; x.split(",")(1).substring(0,10).replace("-","").toInt

val orderDates = orders.map((str: String) =&gt; {
str.split(",") (1).substring(0,10).replace("-","").toInt
})

scala&gt; orderDates.take(10).foreach(println)
20130725
20130725
20130725
20130725
20130725
20130725
20130725
20130725
20130725
20130725


val ordersPariedRDD = orders.map(order =&gt; {
val o = order.split(",")
(o(0).toInt, o(1).substring(0,10).replace("-","").toInt)
})
 
scala&gt; ordersPariedRDD.take(10).foreach(println)
(1,20130725)
(2,20130725)
(3,20130725)
(4,20130725)
(5,20130725)
(6,20130725)
(7,20130725)
(8,20130725)
(9,20130725)
(10,20130725)


val orderItems= sc.textFile("retail_db/order_items")
val orderItemsPairedRDD = orderItems.map (orderItem =&gt; {
(orderItem.split(",")(1).toInt, orderItem)
})

scala&gt; orderItems.take(10).foreach(println)
1,1,957,1,299.98,299.98
2,2,1073,1,199.99,199.99
3,2,502,5,250.0,50.0
4,2,403,1,129.99,129.99
5,4,897,2,49.98,24.99
6,4,365,5,299.95,59.99
7,4,502,3,150.0,50.0
8,4,1014,4,199.92,49.98
9,5,957,1,299.98,299.98
10,5,365,5,299.95,59.99

scala&gt; orderItemsPairedRDD.take(10).foreach(println)
(1,1,1,957,1,299.98,299.98)
(2,2,2,1073,1,199.99,199.99)
(2,3,2,502,5,250.0,50.0)
(2,4,2,403,1,129.99,129.99)
(4,5,4,897,2,49.98,24.99)
(4,6,4,365,5,299.95,59.99)
(4,7,4,502,3,150.0,50.0)
(4,8,4,1014,4,199.92,49.98)
(5,9,5,957,1,299.98,299.98)
(5,10,5,365,5,299.95,59.99)

//flatMap

val l = List("Hello", "HOw are doing" ,"Let us perform word count", "As part of the word count program", "we will se how many times each word repeat")

val l_rdd = sc.parallelize(l)
val l_map = l_rdd.map(ele =&gt; ele.split(" "))

val l_flatMap = l_rdd.flatMap(ele =&gt; ele.split(" "))

[Ljava.lang.String;@1cd49353
[Ljava.lang.String;@48143cee
[Ljava.lang.String;@28ac523a
[Ljava.lang.String;@494a72b2
[Ljava.lang.String;@36b029b5

val wordcount = l_flatMap.map(word =&gt; (word, 1)).countByKey

scala&gt; val wordcount = l_flatMap.map(word =&gt; (word, 1)).countByKey
wordcount: scala.collection.Map[String,Long] = Map(se -&gt; 1, "" -&gt; 1, program -&gt; 1, count -&gt; 2, are -&gt; 1, Let -&gt; 1, us -&gt; 1, each -&gt; 1, HOw -&gt; 1, doing -&gt; 1, how -&gt; 1, Hello -&gt; 1, will -&gt; 1, perform -&gt; 1, times -&gt; 1, part -&gt; 1, repeat -&gt; 1, As -&gt; 1, many -&gt; 1, word -&gt; 3, we -&gt; 1, of -&gt; 1, the -&gt; 1)</p>

//Filtering data -vertical filtering

scala> orders.filter(order => order.split(",")(3) == "COMPLETE")
scala> val s = orders.first
s: String = 1,2013-07-25 00:00:00.0,11599,CLOSED

scala> s.contains("COMPLETE") || s.contains("CLOSED")
res19: Boolean = true

scala> s.split(",")(3) == "COMPLETE" || s.split(",")(3) == "CLOSED"
res20: Boolean = true

scala> (s.split(",")(3) == "COMPLETE" || s.split(",")(3) == "CLOSED") && (s.split(",")(1).contains("2013-07-25"))
res22: Boolean = true


//Get all the orders from 2013-09 which is closed or complete

orders.map(order => order.split(",")(3)).distinct

val ordersFiltered = orders.filter(order => {

val o= order.split(",")
(o(3) == "COMPLETE" || o(3) == "CLOSED") && (o(1).contains("2013-09"))
})