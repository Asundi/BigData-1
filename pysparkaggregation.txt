>>> orderItems = sc.textFile("data/order_items")
>>> orderItems.count()
18/05/13 02:47:16 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.
172198


#Aggregartions - total - Get revenue for given order_id


for i in orderItems.take(10): print(i)
1,1,957,1,299.98,299.98
2,2,1073,1,199.99,199.99
3,2,502,5,250.0,50.0
4,2,403,1,129.99,129.99
5,4,897,2,49.98,24.99
6,4,365,5,299.95,59.99
7,4,502,3,150.0,50.0
8,4,1014,4,199.92,49.98
9,5,957,1,299.98,299.98
10,5,365,5,299.95,59.9

orderItemsFiltered = orderItems . \
filter(lambda oi: int(oi.split(",")[1]) ==2)

>>> for i in orderItemsFiltered.take(3): print(i)
... 
2,2,1073,1,199.99,199.99
3,2,502,5,250.0,50.0
4,2,403,1,129.99,129.99


orderItemsSubtotals = orderItemsFiltered. \
map(lambda oi: float(oi.split(",")[4]))


>>> for i in orderItemsSubtotals.take(3): print(i)
... 
199.99
250.0
129.99
>>> from operator import add
>>> orderItemsSubtotals.reduce(add)

579.98000000000002


>>> orderItemsSubtotals.reduce(lambda x,y: x+y)
579.98000000000002


Get order_item with lowest totla amount.
 orderItemsFiltered = orderItems. \
... filter(lambda oi: int(oi.split(",")[1])== 2)
>>> for i in orderItemsFiltered.take(10) : print(i)
... 
2,2,1073,1,199.99,199.99
3,2,502,5,250.0,50.0
4,2,403,1,129.99,129.99

>>> orderItemsFiltered. \
... reduce(lambda x,y : x if (float(x.split(",")[4]) < float(y.split(",")[4])) else y
... )

u'4,2,403,1,129.99,129.99'
>>> 

#Get count by status

>>> orders = sc.textFile("data/orders")
>>> for i in orders.take(10): print(i)
... 
1,2013-07-25 00:00:00.0,11599,CLOSED
2,2013-07-25 00:00:00.0,256,PENDING_PAYMENT
3,2013-07-25 00:00:00.0,12111,COMPLETE
4,2013-07-25 00:00:00.0,8827,CLOSED
5,2013-07-25 00:00:00.0,11318,COMPLETE
6,2013-07-25 00:00:00.0,7130,COMPLETE
7,2013-07-25 00:00:00.0,4530,COMPLETE
8,2013-07-25 00:00:00.0,2911,PROCESSING
9,2013-07-25 00:00:00.0,5657,PENDING_PAYMENT
10,2013-07-25 00:00:00.0,5648,PENDING_PAYMENT

orderSTatus = orders. \
... map(lambda o: (o.split(",")[3],1))
>>> for i in orderSTatus.take(10): print(i)
... 
(u'CLOSED', 1)
(u'PENDING_PAYMENT', 1)
(u'COMPLETE', 1)
(u'CLOSED', 1)
(u'COMPLETE', 1)
(u'COMPLETE', 1)
(u'COMPLETE', 1)
(u'PROCESSING', 1)
(u'PENDING_PAYMENT', 1)
(u'PENDING_PAYMENT', 1)

orderCountByStatus =orderSTatus.countByKey()

 orderCountByStatus
defaultdict(<type 'int'>, {u'COMPLETE': 22899, u'PAYMENT_REVIEW': 729, u'PROCESSING': 8275, u'CANCELED': 1428, u'PENDING': 7610, u'CLOSED': 7556, u'PENDING_PAYMENT': 15030, u'SUSPECTED_FRAUD': 1558, u'ON_HOLD': 3798})

#Aggregations - groupByKey
1, (1 to 1000) - sum (1 to 1000) => 1+2+3+....1000
1,(1 to 1000) - sum(sum (1,250) sum(251,500) sum(501, 750) sum(751,1000)) - reduceByKey and aggregateByKey
reduceByKey - sum and sum same operation use reducebykey
aggregateByKey - avg and sum then use this


#GroupBYKey
#Get Revenue for each order Id
>>> orderItems = sc.textFile("data/order_items")
>>> for i in orderItems.take(10): print(i)
... 
18/05/14 08:25:56 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.
1,1,957,1,299.98,299.98
2,2,1073,1,199.99,199.99
3,2,502,5,250.0,50.0
4,2,403,1,129.99,129.99
5,4,897,2,49.98,24.99
6,4,365,5,299.95,59.99
7,4,502,3,150.0,50.0
8,4,1014,4,199.92,49.98
9,5,957,1,299.98,299.98
10,5,365,5,299.95,59.99

orderItemsMap = orderItems. \
map(lambda oi: (int(oi.split(",")[1]),float(oi.split(",")[4])))


for i in orderItemsMap.take(10): print(i)

(1, 299.98000000000002)
(2, 199.99000000000001)
(2, 250.0)
(2, 129.99000000000001)
(4, 49.979999999999997)
(4, 299.94999999999999)
(4, 150.0)
(4, 199.91999999999999)
(5, 299.98000000000002)
(5, 299.94999999999999)

 orderItemsGroupByOrderId = orderItemsMap.groupByKey()

(1, <pyspark.resultiterable.ResultIterable object at 0x136f450>)
(2, <pyspark.resultiterable.ResultIterable object at 0x136f610>)
(4, <pyspark.resultiterable.ResultIterable object at 0x136f650>)
(5, <pyspark.resultiterable.ResultIterable object at 0x136f690>)
(7, <pyspark.resultiterable.ResultIterable object at 0x136f6d0>)
(8, <pyspark.resultiterable.ResultIterable object at 0x136f710>)
(9, <pyspark.resultiterable.ResultIterable object at 0x136f750>)
(10, <pyspark.resultiterable.ResultIterable object at 0x136f790>)
(11, <pyspark.resultiterable.ResultIterable object at 0x136f7d0>)
(12, <pyspark.resultiterable.ResultIterable object at 0x136f810>)

l= orderItemsGroupByOrderId.first()
>>> type(l)
<type 'tuple'>
>>> l[0]
1
>>> list(l[1])
[299.98000000000002]

revenuePerOrderId = orderItemsGroupByOrderId. \
map(lambda oi:(oi[0], round(sum(oi[1]),2) ))
for i in revenuePerOrderId.take(10): print(i)
... 
(1, 299.98000000000002)
(2, 579.98000000000002)
(4, 699.85000000000002)
(5, 1129.8599999999999)
(7, 579.91999999999996)
(8, 729.84000000000003)
(9, 599.96000000000004)
(10, 651.91999999999996)
(11, 919.78999999999996)
(12, 1299.8699999999999)

#Get Order Item details in descending order by revenue - grupByKey
orderItems = sc.textFile("data/order_items")
for i in orderItems.take(10): print(i)

orderItemsMap = orderItems. \
map(lambda oi: (int(oi.split(",")[1]), oi))
for i in orderItemsMap.take(10): print(i)

(1, u'1,1,957,1,299.98,299.98')
(2, u'2,2,1073,1,199.99,199.99')
(2, u'3,2,502,5,250.0,50.0')
(2, u'4,2,403,1,129.99,129.99')
(4, u'5,4,897,2,49.98,24.99')
(4, u'6,4,365,5,299.95,59.99')
(4, u'7,4,502,3,150.0,50.0')
(4, u'8,4,1014,4,199.92,49.98')
(5, u'9,5,957,1,299.98,299.98')
(5, u'10,5,365,5,299.95,59.99')

 orderItemsGroupByOrderId = orderItemsMap.groupByKey()

>>> l=orderItemsGroupByOrderId.first()
>>> l[1]
<pyspark.resultiterable.ResultIterable object at 0x136f090>
>>> list(l[1])
sorted(l[1], key =lambda k:float(k.split(",")[4]),reverse=True)
[u'1,1,957,1,299.98,299.98']

orderItemsSortedBySubtotalPerOrder= orderItemsGroupByOrderId. \
map(lambda oi: sorted(oi[1], key =lambda k:float( k.split(",")[4]), reverse =True))

for i in orderItemsSortedBySubtotalPerOrder.take(10): print(i)

[u'1,1,957,1,299.98,299.98']
[u'3,2,502,5,250.0,50.0', u'2,2,1073,1,199.99,199.99', u'4,2,403,1,129.99,129.99']
[u'6,4,365,5,299.95,59.99', u'8,4,1014,4,199.92,49.98', u'7,4,502,3,150.0,50.0', u'5,4,897,2,49.98,24.99']
[u'9,5,957,1,299.98,299.98', u'12,5,957,1,299.98,299.98', u'10,5,365,5,299.95,59.99', u'13,5,403,1,129.99,129.99', u'11,5,1014,2,99.96,49.98']
[u'15,7,957,1,299.98,299.98', u'14,7,1073,1,199.99,199.99', u'16,7,926,5,79.95,15.99']
[u'18,8,365,5,299.95,59.99', u'19,8,1014,4,199.92,49.98', u'17,8,365,3,179.97,59.99', u'20,8,502,1,50.0,50.0']
[u'22,9,1073,1,199.99,199.99', u'23,9,1073,1,199.99,199.99', u'21,9,191,2,199.98,99.99']
[u'24,10,1073,1,199.99,199.99', u'28,10,1073,1,199.99,199.99', u'26,10,403,1,129.99,129.99', u'25,10,1014,2,99.96,49.98', u'27,10,917,1,21.99,21.99']
[u'32,11,191,4,399.96,99.99', u'33,11,1014,5,249.9,49.98', u'30,11,627,4,159.96,39.99', u'29,11,365,1,59.99,59.99', u'31,11,1014,1,49.98,49.98']
[u'37,12,191,5,499.95,99.99', u'34,12,957,1,299.98,299.98', u'38,12,502,5,250.0,50.0', u'36,12,1014,3,149.94,49.98', u'35,12,134,4,100.0,25.0']



orderItemsSortedBySubtotalPerOrder= orderItemsGroupByOrderId. \
flatMap(lambda oi: sorted(oi[1], key =lambda k:float( k.split(",")[4]), reverse =True))


for i in orderItemsSortedBySubtotalPerOrder.take(10): print(i)
1,1,957,1,299.98,299.98
3,2,502,5,250.0,50.0
2,2,1073,1,199.99,199.99
4,2,403,1,129.99,129.99
6,4,365,5,299.95,59.99
8,4,1014,4,199.92,49.98
7,4,502,3,150.0,50.0
5,4,897,2,49.98,24.99
9,5,957,1,299.98,299.98
12,5,957,1,299.98,299.98

#Get revenue for each order_id - reduceByKey
orderItems = sc.textFile("data/order_items")
orderItemsMap = orderItems. \
map(lambda oi:(int(oi.split(",")[1]), float(oi.split(",")[4])))

from operator import add

revenuePerOrderId = orderItemsMap. \
reduceByKey(add)

revenuePerOrderId = orderItemsMap. \
reduceByKey(lambda x,y : x+y)

for i in revenuePerOrderId.take(10): print(i)
... 
(1, 299.98000000000002)
(2, 579.98000000000002)
(4, 699.85000000000002)
(5, 1129.8600000000001)
(7, 579.92000000000007)
(8, 729.83999999999992)
(9, 599.96000000000004)
(10, 651.92000000000007)
(11, 919.78999999999996)
(12, 1299.8700000000001)

minSubtotalPerOrderId = orderItemsMap. \
reduceByKey(lambda x,y: x if (x<y) else y)

for i in minSubtotalPerOrderId.take(10):print(i)
... 
(1, 299.98000000000002)
(2, 129.99000000000001)
(4, 49.979999999999997)
(5, 99.959999999999994)
(7, 79.950000000000003)
(8, 50.0)
(9, 199.97999999999999)
(10, 21.989999999999998)
(11, 49.979999999999997)
(12, 100.0)


#Get order item details with minimum subtotal for each order_id
orderItems = sc.textFile("data/order_items")
orderItemsMap = orderItems. \
map(lambda oi:(int(oi.split(",")[1]), oi))

minSubtotalPerOrderId = orderItemsMap. \
reduceByKey(lambda x,y: x if (float(x.split(",")[4])<float(y.split(",")[4])) else y)
for i in minSubtotalPerOrderId.take(10):print(i)

(1, u'1,1,957,1,299.98,299.98')
(2, u'4,2,403,1,129.99,129.99')
(4, u'5,4,897,2,49.98,24.99')
(5, u'11,5,1014,2,99.96,49.98')
(7, u'16,7,926,5,79.95,15.99')
(8, u'20,8,502,1,50.0,50.0')
(9, u'21,9,191,2,199.98,99.99')
(10, u'27,10,917,1,21.99,21.99')
(11, u'31,11,1014,1,49.98,49.98')
(12, u'35,12,134,4,100.0,25.0')

#Get revenue and count of items for each order_id - aggregateByKey
orderItems = sc.textFile("data/order_items")
orderItemsMap = orderItems. \
map(lambda oi:(int(oi.split(",")[1]), float(oi.split(",")[4])))
>>> for i in orderItemsMap.take(10): print(i)
... 
(1, 299.98000000000002)
(2, 199.99000000000001)
(2, 250.0)
(2, 129.99000000000001) 
(4, 49.979999999999997)
(4, 299.94999999999999)
(4, 150.0)
(4, 199.91999999999999)
(5, 299.98000000000002)
(5, 299.94999999999999)

(2, 199.99000000000001)
(2, 250.0)
(2, 129.99000000000001) 

1st iteration input (0.0,0), 199.99 -> (199.99,1) ->

reducer
(2,(439.99,2))
(2,(129.99,1))

#Aggregate byKey takes 3 arguement(initialvalue,reducer lambda, combiner lambda)
revenuePerOrder =orderItemsMap. \
aggregateByKey( (0.0, 0),
lambda x,y :(x[0]+y,x[1]+1),
lambda x,y: (x[0]+y[0], x[1]+y[1]))


>>> for i in revenuePerOrder.take(10): print(i
... )
... 

(1, (299.98000000000002, 1))
(2, (579.98000000000002, 3))
(4, (699.85000000000002, 4))
(5, (1129.8600000000001, 5))
(7, (579.92000000000007, 3))
(8, (729.83999999999992, 4))
(9, (599.96000000000004, 3))
(10, (651.92000000000007, 5))
(11, (919.78999999999996, 5))
(12, (1299.8700000000001, 5))

 
 #sortBYKey
#Sort data by product price - sortByKey
products = sc.textFile("data/products")
for i in products.take(10): print(i)

1,2,Quest Q64 10 FT. x 10 FT. Slant Leg Instant U,,59.98,http://images.acmesports.sports/Quest+Q64+10+FT.+x+10+FT.+Slant+Leg+Instant+Up+Canopy
2,2,Under Armour Men's Highlight MC Football Clea,,129.99,http://images.acmesports.sports/Under+Armour+Men%27s+Highlight+MC+Football+Cleat
3,2,Under Armour Men's Renegade D Mid Football Cl,,89.99,http://images.acmesports.sports/Under+Armour+Men%27s+Renegade+D+Mid+Football+Cleat
4,2,Under Armour Men's Renegade D Mid Football Cl,,89.99,http://images.acmesports.sports/Under+Armour+Men%27s+Renegade+D+Mid+Football+Cleat
5,2,Riddell Youth Revolution Speed Custom Footbal,,199.99,http://images.acmesports.sports/Riddell+Youth+Revolution+Speed+Custom+Football+Helmet
6,2,Jordan Men's VI Retro TD Football Cleat,,134.99,http://images.acmesports.sports/Jordan+Men%27s+VI+Retro+TD+Football+Cleat
7,2,Schutt Youth Recruit Hybrid Custom Football H,,99.99,http://images.acmesports.sports/Schutt+Youth+Recruit+Hybrid+Custom+Football+Helmet+2014
8,2,Nike Men's Vapor Carbon Elite TD Football Cle,,129.99,http://images.acmesports.sports/Nike+Men%27s+Vapor+Carbon+Elite+TD+Football+Cleat
9,2,Nike Adult Vapor Jet 3.0 Receiver Gloves,,50.0,http://images.acmesports.sports/Nike+Adult+Vapor+Jet+3.0+Receiver+Gloves
10,2,Under Armour Men's Highlight MC Football Clea,,129.99,http://images.acmesports.sports/Under+Armour+Men%27s+Highlight+MC+Football+Cleat



