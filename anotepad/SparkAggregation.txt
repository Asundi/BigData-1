<p>reducebykeyuse combiner,aggregatebykey, groupbykey(dont use), countBykey


//Aggregation - using actions

val orders = sc.textFile("retail_db/orders")
orders.map(order => (order.split(",")(3),"")).countByKey.foreach(println)

scala> orders.map(order => (order.split(",")(3),"")).countByKey.foreach(println)
(PAYMENT_REVIEW,729) 
(CLOSED,7556)
(SUSPECTED_FRAUD,1558)
(PROCESSING,8275)
(COMPLETE,22899)
(PENDING,7610)
(PENDING_PAYMENT,15030)
(ON_HOLD,3798)
(CANCELED,1428)

val orderItems = sc.textFile("retail_db/order_items")


val orderItemsRevenue = orderItems.map(oi =>oi.split(",")(4).toFloat)
scala> orderItemsRevenue.reduce((total, revenue) => total + revenue)
res25: Float = 3.4326256E7

scala> val orderItemsMaxRevenue = orderItemsRevenue.reduce((max,revenue) => {
 | if (max > revenue)
 | revenue
 | else
 | max
 | })
orderItemsMaxRevenue: Float = 1999.99


//Aggregation understanding combiners
//groupbykey

1,(1 to 1000) - sum(1 to 1000) =&gt; 1+2+3 +.....1000
reduceByKey and aggregateByKey multiple threads. 1,(1 to 100) - sum( 1,25) sum(26,50) sum(51,75)



val orderItems = sc.textFile("retail_db/order_items")

val orderItemsMap = orderItems.map (oi => (oi.split(",")(1).toInt , oi.split(",")(4).toFloat))

scala> orderItemsMap.take(10).foreach(println)
(1,299.98)
(2,199.99)
(2,250.0)
(2,129.99)
(4,49.98)
(4,299.95)
(4,150.0)
(4,199.92)
(5,299.98)
(5,299.95)


val orderItemsGBK = orderItemsMap.groupByKey
scala> orderItemsGBK.take(10).foreach(println)
(41234,CompactBuffer(109.94))                                                   
(65722,CompactBuffer(119.98, 400.0, 399.98, 199.95, 199.98))
(28730,CompactBuffer(299.95, 50.0))
(68522,CompactBuffer(329.99))
(23776,CompactBuffer(199.99, 129.99))
(32676,CompactBuffer(59.99, 159.96, 299.97, 199.99))
(53926,CompactBuffer(119.98, 99.99))
(4926,CompactBuffer(199.92, 199.99, 239.96, 299.98))
(38926,CompactBuffer(499.95, 250.0, 299.95))
(29270,CompactBuffer(299.95, 119.98, 399.98, 159.96, 399.98))

val l: Iterable[Float] = Iterable(119.98, 400.0, 399.98, 199.95, 199.98)

scala> val l = List(119.98, 400.0, 399.98, 199.95, 199.98)
l: List[Double] = List(119.98, 400.0, 399.98, 199.95, 199.98)


//Get revenue per order_id 

orderItemsGBK.map(rec => (rec._1,rec._2.toList.sum)).take(10).foreach(println)

//Get data in descending order by order_item_subtotal for each order_id

val ordersSortedByRevenue = orderItemsGBK.
    flatMap(rec => {
     rec._2.toList.sortBy(o => -o) .map(k => (rec._1,k))
  })

//Aggregations - ReduceBYKey


val orderItems = sc.textFile("retail_db/order_items")
val orderItemsMap = orderItems.map (oi => (oi.split(",")(1).toInt , oi.split(",")(4).toFloat))
val revenuePerOrderId = orderItemsMap.
reduceByKey((total, revenue ) => total + revenue)


val minRevenuePerOrderId = orderItemsMap.
reduceByKey((min, revenue) => if (min > revenue) revenue else min)

scala> minRevenuePerOrderId.sortByKey().take(10).foreach(println)
(1,299.98)                                                                      
(2,129.99)
(4,49.98)
(5,99.96)
(7,79.95)
(8,50.0)
(9,199.98)
(10,21.99)
(11,49.98)
(12,100.0)

//Aggregations - aggregateByKey

val orderItems = sc.textFile("retail_db/order_items")
val orderItemsMap = orderItems.map (oi => (oi.split(",")(1).toInt , oi.split(",")(4).toFloat))

//(order_id, order_item_subtotal)
val revenueAndMaxPerProductId = orderItemsMap.
aggregateByKey((0.0f, 0.0f))(

   (inter, subtotal ) => (inter._1 +subtotal, if(subtotal > inter._2 ) subtotal else inter._2),
 
   (total, inter) => (total._1 +inter._1, if(total._2 >inter._2) total._2 else inter._2)
)
//(order_id, (order_revenue, max_order_item_subtotal))


//Sorting - sortByKey

val products =  sc.textFile("retail_db/products")

val prodcutsMap =products.
map(product => (product.split (",")(1).toInt,product))

val productsSortedByCategoryId = prodcutsMap.sortByKey()

//for descending order
val productsSortedByCategoryId = prodcutsMap.sortByKey(false)

val prodcutsMap =products.
filter(product => product.split(",")(4) !="").
map(product => ((product.split (",")(1).toInt, -product.split(",")(4).toFloat), product))

val productsSortedByCategoryId = prodcutsMap.sortByKey().map(rec => rec._2)

//Ranking -Global (details of top 10 products)

val products =  sc.textFile("retail_db/products")

val prodcutsMap = products.
filter(product => product.split(",")(4) !="").
map(product => (product.split (",")(4).toFloat , product))

val productsSortedByPrice = prodcutsMap.sortByKey(false)
productsSortedByPrice.take(10).foreach(println)

//takeordered approach for global ranking

val products =  sc.textFile("retail_db/products")

products.
filter(product => product.split(",")(4) !="").
takeOrdered(10)(Ordering[Float].reverse.on(product => product.split(",")(4).toFloat))

//Ranking - Get top N priced products with in each product category

val products =  sc.textFile("retail_db/products")

val productsMap =  products.
   filter(product => product.split(",")(4) !="").
   map(product => (product.split(",")(1).toInt, product ))

val productsGropByCategory = productsMap.groupByKey

 val productsIterable = productsGropByCategory.first._2


 val productsIterable = productsGropByCategory.first._2

scala> productsIterable.map(p => p.split(",")(4).toFloat)
res2: Iterable[Float] = List(59.99, 59.99, 169.99, 169.99, 149.99, 149.99, 149.99, 129.99, 129.99, 129.99, 99.99, 99.99, 99.99, 149.99, 149.99, 149.99, 99.99, 99.99, 139.99, 139.99, 139.99, 139.99, 34.99, 99.99)

scala> productsIterable.map(p => p.split(",")(4).toFloat).toSet
res3: scala.collection.immutable.Set[Float] = Set(99.99, 169.99, 149.99, 59.99, 129.99, 34.99, 139.99)

scala> val productPrices = productsIterable.map(p => p.split(",")(4).toFloat).toSet
productPrices: scala.collection.immutable.Set[Float] = Set(99.99, 169.99, 149.99, 59.99, 129.99, 34.99, 139.99)

scala>  productPrices.toList
res4: List[Float] = List(99.99, 169.99, 149.99, 59.99, 129.99, 34.99, 139.99)

scala>  productPrices.toList.sortBy(p => -p)
res6: List[Float] = List(169.99, 149.99, 139.99, 129.99, 99.99, 59.99, 34.99)

scala>  productPrices.toList.sortBy(p => -p).take(5)
res7: List[Float] = List(169.99, 149.99, 139.99, 129.99, 99.99)



def getTopNPricedProducts(productsIterable : Iterable[String], topN: Int) : Iterable[String] = {

     val productPrices = productsIterable.map(p => p.split(",")(4).toFloat).toSet
     val topNPrices = productPrices.toList.sortBy(p => -p).take(topN)
     val productsSorted = productsIterable.toList.sortBy(product => -product.split(",")(4).toFloat)
     val minOfTopNPrices =topNPrices.min
     val topNPricedProducts = productsSorted.takeWhile( product => product.split(",")(4).toFloat >= minOfTopNPrices)
 
    topNPricedProducts
}

 val productsIterable = productsGropByCategory.first._2

val productPrices = productsIterable.map(p => p.split(",")(4).toFloat).toSet

val topNPrices = productPrices.toList.sortBy(p => -p).take(5)

// Get all the products in descending order by price
val productsSorted = productsIterable.toList.sortBy(product => -product.split(",")(4).toFloat)

val topNPrices = productPrices.toList.sortBy(p => -p).take(5)


scala> val minOfTopNPrices =topNPrices.min
minOfTopNPrices: Float = 99.99

val topNPricedProducts = productsSorted.takeWhile( product => product.split(",")(4).toFloat >= minOfTopNPrices)


scala> getTopNPricedProducts(productsIterable,5).foreach(println)
743,34,Ogio Race Golf Shoes,,169.99,http://images.acmesports.sports/Ogio+Race+Golf+Shoes
744,34,Ogio Race Golf Shoes,,169.99,http://images.acmesports.sports/Ogio+Race+Golf+Shoes
745,34,Ogio City Spiked Golf Shoes,,149.99,http://images.acmesports.sports/Ogio+City+Spiked+Golf+Shoes
746,34,Ogio City Spiked Golf Shoes,,149.99,http://images.acmesports.sports/Ogio+City+Spiked+Golf+Shoes
747,34,Ogio City Spiked Golf Shoes,,149.99,http://images.acmesports.sports/Ogio+City+Spiked+Golf+Shoes
754,34,TRUE linkswear Lyt Dry Golf Shoes,,149.99,http://images.acmesports.sports/TRUE+linkswear+Lyt+Dry+Golf+Shoes
755,34,TRUE linkswear Lyt Dry Golf Shoes,,149.99,http://images.acmesports.sports/TRUE+linkswear+Lyt+Dry+Golf+Shoes
756,34,TRUE linkswear Lyt Dry Golf Shoes,,149.99,http://images.acmesports.sports/TRUE+linkswear+Lyt+Dry+Golf+Shoes
759,34,Nike Lunarwaverly Golf Shoes,,139.99,http://images.acmesports.sports/Nike+Lunarwaverly+Golf+Shoes
760,34,Nike Lunarwaverly Golf Shoes,,139.99,http://images.acmesports.sports/Nike+Lunarwaverly+Golf+Shoes
761,34,Nike Lunarwaverly Golf Shoes,,139.99,http://images.acmesports.sports/Nike+Lunarwaverly+Golf+Shoes
762,34,Nike Lunarwaverly Golf Shoes,,139.99,http://images.acmesports.sports/Nike+Lunarwaverly+Golf+Shoes
748,34,Ogio City Turf Golf Shoes,,129.99,http://images.acmesports.sports/Ogio+City+Turf+Golf+Shoes
749,34,Ogio City Turf Golf Shoes,,129.99,http://images.acmesports.sports/Ogio+City+Turf+Golf+Shoes
750,34,Ogio City Turf Golf Shoes,,129.99,http://images.acmesports.sports/Ogio+City+Turf+Golf+Shoes
751,34,Ogio Sport Golf Shoes,,99.99,http://images.acmesports.sports/Ogio+Sport+Golf+Shoes
752,34,Ogio Sport Golf Shoes,,99.99,http://images.acmesports.sports/Ogio+Sport+Golf+Shoes
753,34,Ogio Sport Golf Shoes,,99.99,http://images.acmesports.sports/Ogio+Sport+Golf+Shoes
757,34,TRUE linkswear Vegas Golf Shoes,,99.99,http://images.acmesports.sports/TRUE+linkswear+Vegas+Golf+Shoes
758,34,TRUE linkswear Vegas Golf Shoes,,99.99,http://images.acmesports.sports/TRUE+linkswear+Vegas+Golf+Shoes
764,34,Nike Lunar Mount Royal Golf Shoes,,99.99,http://images.acmesports.sports/Nike+Lunar+Mount+Royal+Golf+Shoes

val top3PriceProdcutsPerCategory = productsGropByCategory.flatMap(rec => getTopNPricedProducts(rec._2, 3))

