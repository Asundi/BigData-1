//Use retail_db

//Daily revenue per product considering completed and closed orders.
//ascending order by date descending order by revenue computed for each product for each day.
// read order_items from hdfs, products from local


[cloudera@quickstart ~]$ hadoop fs -ls -h retail_db/order_items
Found 1 items
-rw-r--r--   1 cloudera cloudera      5.2 M 2018-03-13 02:56 retail_db/order_items/part-00000
[cloudera@quickstart ~]$ hadoop fs -ls -h retail_db/orders
Found 1 items
-rw-r--r--   1 cloudera cloudera      2.9 M 2018-03-13 02:56 retail_db/orders/part-00000

//TO set num executors check etc/hadoop/conf yarn-site.xml or localhost: 8088

//yarnsite-   resourcemanager.webapp.address to get 8088
//on 8088 all application check memory total vcores total
//memory total -120 gb abd vcores total -30 then each core can have min of 1gb and max of 4 gb memory.(2-3gb ideal)

//Launch Spark shell - Understand the environment and use resources optimally
spark-shell --help

spark-shell --master yarn \
--num-executors 1 \
--executor-memory 512M \
--conf spark.ui.prot=12673

//Read orders and order_items
val orders = sc.textFile("retail_db/orders")
val orderItems = sc.textFile("retail_db/order_items")
orders.take(10).foreach(println)
orderItems.take(10).foreach(println)

//Filter for completed or closed orders
orders.map(order => order.split(",")(3)).distinct
val ordersFiltered = orders.filter( order => order.split(",")(3) == "COMPLETE" || order.split(",")(3) == "CLOSED") 

scala> ordersFiltered.take(10).foreach(println)
1,2013-07-25 00:00:00.0,11599,CLOSED
3,2013-07-25 00:00:00.0,12111,COMPLETE
4,2013-07-25 00:00:00.0,8827,CLOSED
5,2013-07-25 00:00:00.0,11318,COMPLETE
6,2013-07-25 00:00:00.0,7130,COMPLETE
7,2013-07-25 00:00:00.0,4530,COMPLETE
12,2013-07-25 00:00:00.0,1837,CLOSED
15,2013-07-25 00:00:00.0,2568,COMPLETE
17,2013-07-25 00:00:00.0,2667,COMPLETE
18,2013-07-25 00:00:00.0,1205,CLOSED

//Convert both filtered orders and order_items to key value pairs

val ordersMap = ordersFiltered.map(order => (order.split(",")(0).toInt, order.split(",")(1))) 

val orderitemsMap = orderItems.map( oi =>(oi.split(",")(1).toInt, (oi.split(",")(2).toInt , oi.split(",")(4).toFloat)))

scala> ordersMap.take(10).foreach(println)
(1,2013-07-25 00:00:00.0)
(3,2013-07-25 00:00:00.0)
(4,2013-07-25 00:00:00.0)
(5,2013-07-25 00:00:00.0)
(6,2013-07-25 00:00:00.0)
(7,2013-07-25 00:00:00.0)
(12,2013-07-25 00:00:00.0)
(15,2013-07-25 00:00:00.0)
(17,2013-07-25 00:00:00.0)
(18,2013-07-25 00:00:00.0)

scala> orderitemsMap.take(10
     | ).foreach(println)
(1,(957,299.98))
(2,(1073,199.99))
(2,(502,250.0))
(2,(403,129.99))
(4,(897,49.98))
(4,(365,299.95))
(4,(502,150.0))
(4,(1014,199.92))
(5,(957,299.98))
(5,(365,299.95))

//Join the two data sets
val ordersJoin = ordersMap.join(orderitemsMap)

(65722,(2014-05-23 00:00:00.0,(365,119.98)))                                    
(65722,(2014-05-23 00:00:00.0,(730,400.0)))
(65722,(2014-05-23 00:00:00.0,(1004,399.98)))
(65722,(2014-05-23 00:00:00.0,(627,199.95)))
(65722,(2014-05-23 00:00:00.0,(191,199.98)))
(23776,(2013-12-20 00:00:00.0,(1073,199.99)))
(23776,(2013-12-20 00:00:00.0,(403,129.99)))
(53926,(2014-06-30 00:00:00.0,(365,119.98)))
(53926,(2014-06-30 00:00:00.0,(191,99.99)))
(51620,(2014-06-13 00:00:00.0,(1004,399.98)))

//(order_id, (order_date ,(order_item_product_id, order_item_subtotal)))
//Get Daily revenue per product Id


(65722,(2014-05-23 00:00:00.0,(365,119.98)))        
//((order_date, order_item_product_id), order_item_subtotal)
val ordersJoinMap = ordersJoin.map(rec => ((rec._2._1,rec._2._2._1),rec._2._2._2))

scala> ordersJoinMap.take(10).foreach(println)
((2014-05-23 00:00:00.0,365),119.98)
((2014-05-23 00:00:00.0,730),400.0)
((2014-05-23 00:00:00.0,1004),399.98)
((2014-05-23 00:00:00.0,627),199.95)
((2014-05-23 00:00:00.0,191),199.98)
((2013-12-20 00:00:00.0,1073),199.99)
((2013-12-20 00:00:00.0,403),129.99)
((2014-06-30 00:00:00.0,365),119.98)
((2014-06-30 00:00:00.0,191),99.99)
((2014-06-13 00:00:00.0,1004),399.98)

//((order_date, order_item_product_id), daily_revenue_per_product_id)

val dailyRevenueperproductId = ordersJoinMap.reduceByKey((total,revenue) => total + revenue)
scala> dailyRevenueperproductId.take(10).foreach(println)
((2014-07-17 00:00:00.0,403),3379.7402)                                         
((2013-11-21 00:00:00.0,982),149.99)
((2013-10-11 00:00:00.0,116),224.95)
((2014-01-06 00:00:00.0,564),60.0)
((2013-11-06 00:00:00.0,885),74.97)
((2014-02-26 00:00:00.0,572),199.95)
((2014-03-05 00:00:00.0,1073),2399.8801)
((2014-03-19 00:00:00.0,565),140.0)
((2014-07-15 00:00:00.0,135),110.0)
((2014-06-24 00:00:00.0,403),2079.84)

//Load products from local file system and convert into RDD /home/cloudera/data-master/retail_db/products/part-00000
import scala.io.Source
val productsRaw = Source.fromFile("/home/cloudera/data-master/retail_db/products/part-00000").getLines.toList

val products = sc.parallelize(productsRaw)
products.take(10).foreach(println)
1,2,Quest Q64 10 FT. x 10 FT. Slant Leg Instant U,,59.98,http://images.acmesports.sports/Quest+Q64+10+FT.+x+10+FT.+Slant+Leg+Instant+Up+Canopy
2,2,Under Armour Men's Highlight MC Football Clea,,129.99,http://images.acmesports.sports/Under+Armour+Men%27s+Highlight+MC+Football+Cleat
3,2,Under Armour Men's Renegade D Mid Football Cl,,89.99,http://images.acmesports.sports/Under+Armour+Men%27s+Renegade+D+Mid+Football+Cleat
4,2,Under Armour Men's Renegade D Mid Football Cl,,89.99,http://images.acmesports.sports/Under+Armour+Men%27s+Renegade+D+Mid+Football+Cleat
5,2,Riddell Youth Revolution Speed Custom Footbal,,199.99,http://images.acmesports.sports/Riddell+Youth+Revolution+Speed+Custom+Football+Helmet
6,2,Jordan Men's VI Retro TD Football Cleat,,134.99,http://images.acmesports.sports/Jordan+Men%27s+VI+Retro+TD+Football+Cleat
7,2,Schutt Youth Recruit Hybrid Custom Football H,,99.99,http://images.acmesports.sports/Schutt+Youth+Recruit+Hybrid+Custom+Football+Helmet+2014
8,2,Nike Men's Vapor Carbon Elite TD Football Cle,,129.99,http://images.acmesports.sports/Nike+Men%27s+Vapor+Carbon+Elite+TD+Football+Cleat
9,2,Nike Adult Vapor Jet 3.0 Receiver Gloves,,50.0,http://images.acmesports.sports/Nike+Adult+Vapor+Jet+3.0+Receiver+Gloves
10,2,Under Armour Men's Highlight MC Football Clea,,129.99,http://images.acmesports.sports/Under+Armour+Men%27s+Highlight+MC+Football+Cleat

products.count

//to join 2 data sets it should be a paired RDD but products is rdd of string

val productsMap = products.map(product => (product.split(",")(0).toInt, product.split(",")(2)))

scala> productsMap.take(10).foreach(println)
(1,Quest Q64 10 FT. x 10 FT. Slant Leg Instant U)
(2,Under Armour Men's Highlight MC Football Clea)
(3,Under Armour Men's Renegade D Mid Football Cl)
(4,Under Armour Men's Renegade D Mid Football Cl)
(5,Riddell Youth Revolution Speed Custom Footbal)
(6,Jordan Men's VI Retro TD Football Cleat)
(7,Schutt Youth Recruit Hybrid Custom Football H)
(8,Nike Men's Vapor Carbon Elite TD Football Cle)
(9,Nike Adult Vapor Jet 3.0 Receiver Gloves)
(10,Under Armour Men's Highlight MC Football Clea)

productsMap.count

//((order_date, order_product_id), daily_revenue_per_product_id)
val dailyRevenuePerProductIdMap = dailyRevenueperproductId.
 map(rec =>(rec._1._2, (rec._1._1, rec._2)))

dailyRevenuePerProductIdMap.take(10).foreach(println)

(403,(2014-07-17 00:00:00.0,3379.7402))
(982,(2013-11-21 00:00:00.0,149.99))
(116,(2013-10-11 00:00:00.0,224.95))
(564,(2014-01-06 00:00:00.0,60.0))
(885,(2013-11-06 00:00:00.0,74.97))
(572,(2014-02-26 00:00:00.0,199.95))
(1073,(2014-03-05 00:00:00.0,2399.8801))
(565,(2014-03-19 00:00:00.0,140.0))
(135,(2014-07-15 00:00:00.0,110.0))
(403,(2014-06-24 00:00:00.0,2079.84))


//(order_product_id,(order_date, daily_revenue_per_product_id))

val dailyRevenuePerProductJOin = dailyRevenuePerProductIdMap.join(productsMap)

(24,((2013-11-19 00:00:00.0,239.97),Elevation Training Mask 2.0))
(24,((2014-04-01 00:00:00.0,159.98),Elevation Training Mask 2.0))
(24,((2013-12-06 00:00:00.0,239.97),Elevation Training Mask 2.0))
(24,((2013-08-18 00:00:00.0,399.95),Elevation Training Mask 2.0))
(24,((2013-09-01 00:00:00.0,399.95),Elevation Training Mask 2.0))
(24,((2013-08-16 00:00:00.0,399.95),Elevation Training Mask 2.0))
(24,((2014-04-06 00:00:00.0,239.97),Elevation Training Mask 2.0))
(24,((2013-10-06 00:00:00.0,79.99),Elevation Training Mask 2.0))
(24,((2013-11-02 00:00:00.0,79.99),Elevation Training Mask 2.0))
(24,((2014-02-14 00:00:00.0,159.98),Elevation Training Mask 2.0))


//(order_product_id, ((order_date, daily_revenue_per_product_id), product_name))

//Sort the data by date in ascending order and by daily revenue per product in descending order

val dailyRevenuePerProductSorted = dailyRevenuePerProductJOin.map(rec => ((rec._2._1._1, -rec._2._1._2), (rec._2._1._1,rec._2._1._2, rec._2._2))).sortByKey()

//((order_date_asc, daily_revenue_per_product_id_desc), (order_date,daily_revenue_per_product, product_name))

scala> dailyRevenuePerProductSorted.take(10).foreach(println)
((2013-07-25 00:00:00.0,-5599.72),(2013-07-25 00:00:00.0,5599.72,Field & Stream Sportsman 16 Gun Fire Safe))
((2013-07-25 00:00:00.0,-5099.49),(2013-07-25 00:00:00.0,5099.49,Nike Men's Free 5.0+ Running Shoe))
((2013-07-25 00:00:00.0,-4499.7),(2013-07-25 00:00:00.0,4499.7,Diamondback Women's Serene Classic Comfort Bi))
((2013-07-25 00:00:00.0,-3359.44),(2013-07-25 00:00:00.0,3359.44,Perfect Fitness Perfect Rip Deck))
((2013-07-25 00:00:00.0,-2999.85),(2013-07-25 00:00:00.0,2999.85,Pelican Sunstream 100 Kayak))
((2013-07-25 00:00:00.0,-2798.88),(2013-07-25 00:00:00.0,2798.88,O'Brien Men's Neoprene Life Vest))
((2013-07-25 00:00:00.0,-1949.8501),(2013-07-25 00:00:00.0,1949.8501,Nike Men's CJ Elite 2 TD Football Cleat))
((2013-07-25 00:00:00.0,-1650.0),(2013-07-25 00:00:00.0,1650.0,Nike Men's Dri-FIT Victory Golf Polo))
((2013-07-25 00:00:00.0,-1079.73),(2013-07-25 00:00:00.0,1079.73,Under Armour Girls' Toddler Spine Surge Runni))
((2013-07-25 00:00:00.0,-599.99),(2013-07-25 00:00:00.0,599.99,Bowflex SelectTech 1090 Dumbbells))

//Get data to desired format - order_date,daily_revenue_per_product,product_name
val dailyRevenuePerProduct = dailyRevenuePerProductSorted.
map(rec => rec._2._1+ ","+ rec._2._2 + ","  +rec._2._3)

scala> dailyRevenuePerProduct.take(10).foreach(println)
2013-07-25 00:00:00.0,5599.72,Field & Stream Sportsman 16 Gun Fire Safe
2013-07-25 00:00:00.0,5099.49,Nike Men's Free 5.0+ Running Shoe
2013-07-25 00:00:00.0,4499.7,Diamondback Women's Serene Classic Comfort Bi
2013-07-25 00:00:00.0,3359.44,Perfect Fitness Perfect Rip Deck
2013-07-25 00:00:00.0,2999.85,Pelican Sunstream 100 Kayak
2013-07-25 00:00:00.0,2798.88,O'Brien Men's Neoprene Life Vest
2013-07-25 00:00:00.0,1949.8501,Nike Men's CJ Elite 2 TD Football Cleat
2013-07-25 00:00:00.0,1650.0,Nike Men's Dri-FIT Victory Golf Polo
2013-07-25 00:00:00.0,1079.73,Under Armour Girls' Toddler Spine Surge Runni
2013-07-25 00:00:00.0,599.99,Bowflex SelectTech 1090 Dumbbells


//Save the result as text file
dailyRevenuePerProduct.saveAsTextFile("retail_db/daily_revenue_txt_scala")
sc.textFile("retail_db/daily_revenue_txt_scala").take(10).foreach(println)
2013-07-25 00:00:00.0,5599.72,Field & Stream Sportsman 16 Gun Fire Safe
2013-07-25 00:00:00.0,5099.49,Nike Men's Free 5.0+ Running Shoe
 2013-07-25 00:00:00.0,4499.7,Diamondback Women's Serene Classic Comfort Bi
2013-07-25 00:00:00.0,3359.44,Perfect Fitness Perfect Rip Deck
2013-07-25 00:00:00.0,2999.85,Pelican Sunstream 100 Kayak
2013-07-25 00:00:00.0,2798.88,O'Brien Men's Neoprene Life Vest
2013-07-25 00:00:00.0,1949.8501,Nike Men's CJ Elite 2 TD Football Cleat
2013-07-25 00:00:00.0,1650.0,Nike Men's Dri-FIT Victory Golf Polo
2013-07-25 00:00:00.0,1079.73,Under Armour Girls' Toddler Spine Surge Runni
2013-07-25 00:00:00.0,599.99,Bowflex SelectTech 1090 Dumbbells


[cloudera@quickstart ~]$ hadoop fs -tail retail_db/daily_revenue_txt_scala/part-00000
0199.32,Diamondback Women's Serene Classic Comfort Bi
2014-01-30 00:00:00.0,6718.8794,Perfect Fitness Perfect Rip Deck
2014-01-30 00:00:00.0,5999.4,Nike Men's Free 5.0+ Running Shoe
2014-01-30 00:00:00.0,5199.6,Nike Men's CJ Elite 2 TD Football Cleat
2014-01-30 00:00:00.0,4399.7803,Pelican Sunstream 100 Kayak
2014-01-30 00:00:00.0,4398.2393,O'Brien Men's Neoprene Life Vest
2014-01-30 00:00:00.0,3550.0,Nike Men's Dri-FIT Victory Golf Polo
2014-01-30 00:00:00.0,1359.66,Under Armour Girls' Toddler Spine Surge Runni
2014-01-30 00:00:00.0,330.0,Nike Men's Deutschland Weltmeister Winners Bl
2014-01-30 00:00:00.0,224.95,Under Armour Men's Compression EV SL Slide
2014-01-30 00:00:00.0,191.96,Titleist Pro V1x Golf Balls
2014-01-30 00:00:00.0,159.95,Under Armour Women's Ignite Slide
2014-01-30 00:00:00.0,150.0,Nike Women's Tempo Shorts
2014-01-30 00:00:00.0,139.95,Under Armour Kids' Mercenary Slide
2014-01-30 00:00:00.0,99.96,Bag Boy Beverage Holder
2014-01-30 00:00:00.0,99.96,Team Golf St. Louis Cardinals Putter Grip


hadoop fs -get retail_db/daily_revenue_txt_scala /home/cloudera/daily_revenue_scala
